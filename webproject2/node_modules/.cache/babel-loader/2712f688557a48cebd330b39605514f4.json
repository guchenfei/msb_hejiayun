{"remainingRequest":"E:\\ideas-test\\webproject\\node_modules\\babel-loader\\lib\\index.js!E:\\ideas-test\\webproject\\node_modules\\eslint-loader\\index.js??ref--14-0!E:\\ideas-test\\webproject\\src\\utils\\routeConvert.js","dependencies":[{"path":"E:\\ideas-test\\webproject\\src\\utils\\routeConvert.js","mtime":1587193626000},{"path":"E:\\ideas-test\\webproject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655196103443},{"path":"E:\\ideas-test\\webproject\\node_modules\\babel-loader\\lib\\index.js","mtime":1655196104199},{"path":"E:\\ideas-test\\webproject\\node_modules\\eslint-loader\\index.js","mtime":1655196103780}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIjsKaW1wb3J0IGNsb25lRGVlcCBmcm9tICdsb2Rhc2guY2xvbmVkZWVwJzsKZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRSb3V0ZXMobm9kZXMpIHsKICBpZiAoIW5vZGVzKSByZXR1cm4gbnVsbDsKICBub2RlcyA9IGNsb25lRGVlcChub2Rlcyk7CiAgdmFyIHF1ZXVlID0gQXJyYXkuaXNBcnJheShub2RlcykgPyBub2Rlcy5jb25jYXQoKSA6IFtub2Rlc107CgogIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHsKICAgIHZhciBsZXZlbFNpemUgPSBxdWV1ZS5sZW5ndGg7CgogICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkgewogICAgICB2YXIgbm9kZSA9IHF1ZXVlLnNoaWZ0KCk7CiAgICAgIGlmICghbm9kZS5jaGlsZHJlbiB8fCAhbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHJldHVybiAiY29udGludWUiOwogICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgLy8g6L2s5YyW55u45a+56Lev5b6ECiAgICAgICAgaWYgKGNoaWxkLnBhdGhbMF0gIT09ICcvJyAmJiAhY2hpbGQucGF0aC5zdGFydHNXaXRoKCdodHRwJykpIHsKICAgICAgICAgIGNoaWxkLnBhdGggPSBub2RlLnBhdGgucmVwbGFjZSgvKFx3KilbL10qJC8sICIkMS8iLmNvbmNhdChjaGlsZC5wYXRoKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcXVldWUgPSBxdWV1ZS5jb25jYXQobm9kZS5jaGlsZHJlbik7CiAgICB9OwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxTaXplOyBpKyspIHsKICAgICAgdmFyIF9yZXQgPSBfbG9vcChpKTsKCiAgICAgIGlmIChfcmV0ID09PSAiY29udGludWUiKSBjb250aW51ZTsKICAgIH0KICB9CgogIHJldHVybiBub2RlczsKfQ=="},{"version":3,"sources":["E:/ideas-test/webproject/src/utils/routeConvert.js"],"names":["cloneDeep","convertRoutes","nodes","queue","Array","isArray","concat","length","levelSize","i","node","shift","children","forEach","child","path","startsWith","replace"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AACjC,MAAI,CAACA,KAAL,EAAY,OAAO,IAAP;AAEZA,EAAAA,KAAK,GAAGF,SAAS,CAACE,KAAD,CAAjB;AAEA,MAAIC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAK,CAACI,MAAN,EAAvB,GAAwC,CAACJ,KAAD,CAApD;;AAEA,SAAOC,KAAK,CAACI,MAAb,EAAqB;AACjB,QAAMC,SAAS,GAAGL,KAAK,CAACI,MAAxB;;AADiB,+BAGRE,CAHQ;AAIb,UAAMC,IAAI,GAAGP,KAAK,CAACQ,KAAN,EAAb;AAEA,UAAI,CAACD,IAAI,CAACE,QAAN,IAAkB,CAACF,IAAI,CAACE,QAAL,CAAcL,MAArC,EAA6C;AAE7CG,MAAAA,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAsB,UAAAC,KAAK,EAAI;AAC3B;AACA,YAAIA,KAAK,CAACC,IAAN,CAAW,CAAX,MAAkB,GAAlB,IAAyB,CAACD,KAAK,CAACC,IAAN,CAAWC,UAAX,CAAsB,MAAtB,CAA9B,EAA6D;AACzDF,UAAAA,KAAK,CAACC,IAAN,GAAaL,IAAI,CAACK,IAAL,CAAUE,OAAV,CAAkB,YAAlB,eAAsCH,KAAK,CAACC,IAA5C,EAAb;AACH;AACJ,OALD;AAOAZ,MAAAA,KAAK,GAAGA,KAAK,CAACG,MAAN,CAAaI,IAAI,CAACE,QAAlB,CAAR;AAfa;;AAGjB,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAApB,EAA+BC,CAAC,EAAhC,EAAoC;AAAA,uBAA3BA,CAA2B;;AAAA,+BAGa;AAUhD;AACJ;;AAED,SAAOP,KAAP;AACH","sourcesContent":["import cloneDeep from 'lodash.clonedeep'\r\n\r\nexport function convertRoutes(nodes) {\r\n    if (!nodes) return null\r\n\r\n    nodes = cloneDeep(nodes)\r\n\r\n    let queue = Array.isArray(nodes) ? nodes.concat() : [nodes]\r\n\r\n    while (queue.length) {\r\n        const levelSize = queue.length\r\n\r\n        for (let i = 0; i < levelSize; i++) {\r\n            const node = queue.shift()\r\n\r\n            if (!node.children || !node.children.length) continue\r\n\r\n            node.children.forEach(child => {\r\n                // 转化相对路径\r\n                if (child.path[0] !== '/' && !child.path.startsWith('http')) {\r\n                    child.path = node.path.replace(/(\\w*)[/]*$/, `$1/${child.path}`)\r\n                }\r\n            })\r\n\r\n            queue = queue.concat(node.children)\r\n        }\r\n    }\r\n\r\n    return nodes\r\n}\r\n"]}]}